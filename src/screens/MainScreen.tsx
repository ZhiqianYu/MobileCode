// src/screens/MainScreen.tsx - ÂÆåÊï¥ÂÆûÁé∞ÁâàÊú¨
import React from 'react';
import {
  View,
  StyleSheet,
  SafeAreaView,
  Alert,
  Text,
} from 'react-native';
import { useAppState } from '../hooks/useAppState';
import { useSSH } from '../hooks/useSSH';
import TopBar from '../components/Layout/TopBar';
import MainContent from '../components/Layout/MainContent';
import BottomTabs from '../components/Layout/BottomTabs';
import { SSHConnection } from '../types/ssh';

const MainScreen: React.FC = () => {
  const { state, setCurrentView, toggleSidebar } = useAppState();
  const { 
    currentConnection, 
    isConnected, 
    isConnecting, 
    ping, 
    error,
    connect,
    disconnect
  } = useSSH();

  const handleMenuPress = () => {
    toggleSidebar();
    console.log('Menu pressed, sidebar:', !state.sidebarVisible);
    // TODO: ÊòæÁ§∫ËøûÊé•ÂàóË°®‰æßËæπÊ†è
    Alert.alert('ËèúÂçï', 'ËøûÊé•ÂàóË°®ÂäüËÉΩÂºÄÂèë‰∏≠...');
  };

  const handleSettingsPress = () => {
    showTestConnectionDialog();
  };

  const showTestConnectionDialog = () => {
    Alert.alert(
      'MobileCode ËÆæÁΩÆ',
      'ÈÄâÊã©Êìç‰Ωú',
      [
        {
          text: 'ËøûÊé•ÊµãËØïÊúçÂä°Âô®',
          onPress: () => testConnect(),
        },
        {
          text: 'Êñ≠ÂºÄËøûÊé•',
          onPress: () => handleDisconnect(),
          style: 'destructive',
        },
        {
          text: 'Ê∑ªÂä†Êñ∞ËøûÊé•',
          onPress: () => showAddConnectionDialog(),
        },
        {
          text: 'ÂèñÊ∂à',
          style: 'cancel',
        },
      ]
    );
  };

  const showAddConnectionDialog = () => {
    Alert.alert('Ê∑ªÂä†ËøûÊé•', 'ËøûÊé•ÁÆ°ÁêÜÂäüËÉΩÂºÄÂèë‰∏≠...\n\nÂ∞ÜÊù•ËøôÈáå‰ºöÊúâÂÆåÊï¥ÁöÑËøûÊé•ÈÖçÁΩÆÁïåÈù¢');
  };

  const testConnect = async () => {
    const testConnection: SSHConnection = {
      id: 'test-1',
      name: 'ÊµãËØïÊúçÂä°Âô®',
      host: '192.168.1.100',
      port: 22,
      username: 'developer',
      password: 'password123',
      isConnected: false,
      lastUsed: new Date(),
      createdAt: new Date(),
    };

    try {
      const success = await connect(testConnection);
      if (success) {
        Alert.alert(
          'ËøûÊé•ÊàêÂäü! üéâ', 
          'Â∑≤ËøûÊé•Âà∞ÊµãËØïÊúçÂä°Âô®\n\nÁé∞Âú®ÂèØ‰ª•:\n‚Ä¢ ÂàáÊç¢Âà∞ÁªàÁ´ØÊ†áÁ≠æ\n‚Ä¢ ËæìÂÖ•ÂëΩ‰ª§ÊµãËØï\n‚Ä¢ ‰ΩøÁî®Âø´Êç∑ÂëΩ‰ª§',
          [
            {
              text: 'ÂéªÁªàÁ´Ø',
              onPress: () => setCurrentView('terminal'),
            },
            {
              text: 'Â•ΩÁöÑ',
              style: 'default',
            }
          ]
        );
      } else {
        Alert.alert('ËøûÊé•Â§±Ë¥•', 'Êó†Ê≥ïËøûÊé•Âà∞ÊúçÂä°Âô®ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•');
      }
    } catch (error) {
      Alert.alert('ÈîôËØØ', error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ');
    }
  };

  const handleDisconnect = async () => {
    if (!isConnected) {
      Alert.alert('ÊèêÁ§∫', 'ÂΩìÂâçÊ≤°ÊúâÊ¥ªÂä®ËøûÊé•');
      return;
    }

    try {
      await disconnect();
      Alert.alert('Â∑≤Êñ≠ÂºÄ', 'ËøûÊé•Â∑≤ÊàêÂäüÊñ≠ÂºÄ');
    } catch (error) {
      Alert.alert('ÈîôËØØ', 'Êñ≠ÂºÄËøûÊé•Êó∂Âá∫Èîô');
    }
  };

  const handleQuickViewChange = (view: typeof state.currentView) => {
    setCurrentView(view);
  };

  const handleViewChange = (view: typeof state.currentView) => {
    setCurrentView(view);
  };

  const getDisplayUser = (): string => {
    return currentConnection?.username || 'user';
  };

  const getDisplayHost = (): string => {
    return currentConnection?.host || 'Êú™ËøûÊé•';
  };

  const getDisplayPing = (): number => {
    return ping || 0;
  };

  const getConnectionStatus = (): boolean => {
    return isConnected;
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <TopBar
          user={getDisplayUser()}
          host={getDisplayHost()}
          ping={getDisplayPing()}
          isConnected={getConnectionStatus()}
          onMenuPress={handleMenuPress}
          onSettingsPress={handleSettingsPress}
          onQuickViewChange={handleQuickViewChange}
        />

        <MainContent currentView={state.currentView} />

        <BottomTabs
          currentView={state.currentView}
          onViewChange={handleViewChange}
        />
      </View>

      {isConnecting && (
        <View style={styles.overlay}>
          <View style={styles.connectingIndicator}>
            <Text style={styles.connectingText}>Ê≠£Âú®ËøûÊé•...</Text>
            <Text style={styles.connectingSubText}>ËØ∑Á®çÂÄô</Text>
          </View>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a1a1a',
  },
  content: {
    flex: 1,
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  connectingIndicator: {
    backgroundColor: '#2d2d2d',
    padding: 20,
    borderRadius: 8,
    alignItems: 'center',
  },
  connectingText: {
    color: '#ffa500',
    fontSize: 16,
    fontWeight: 'bold',
  },
  connectingSubText: {
    color: '#999',
    fontSize: 14,
    marginTop: 4,
  },
});

export default MainScreen;